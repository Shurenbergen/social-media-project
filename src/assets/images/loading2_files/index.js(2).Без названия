(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
// Generated by LiveScript 1.3.0
(function(){
  var ret;
  ret = {
    id: 'gears',
    type: 'spinner',
    name: 'Gears',
    desc: "great alternative to single gear loader",
    tags: ['rotate', 'gear', 'config', 'setting', 'tool'],
    slug: "dual-gear-loading-icon",
    license: 'pro',
    edit: {
      innerRadius: {
        name: "In Radius",
        type: 'number',
        'default': 23,
        priority: 1.4
      },
      outerRadius: {
        name: "Out Radius",
        type: 'number',
        'default': 38,
        priority: 1.5
      },
      toothHeight: {
        name: "Tooth H",
        type: 'number',
        'default': 10,
        priority: 1.6
      },
      toothWidth: {
        name: "Tooth W",
        type: 'number',
        'default': 14,
        priority: 1.7
      },
      count: {
        name: "Count",
        type: 'number',
        'default': 8,
        priority: 1.3,
        min: 4,
        max: 20,
        step: 2
      },
      c1: {
        name: "Color 1",
        type: 'color',
        'default': '#f47e60',
        priority: 1.1
      },
      c2: {
        name: "Color 2",
        type: 'color',
        'default': '#abbd81',
        priority: 1.2
      },
      speed: {
        'default': 5
      }
    },
    download: function(arg$){
      var type, ref$, cfg, lc, s, half, html, dr, da1, da2, css, i$, to$, i;
      type = arg$.type;
      if (type !== 'css') {
        return;
      }
      ref$ = [this.config, this.local], cfg = ref$[0], lc = ref$[1];
      s = (ref$ = cfg.size / 100) > 1 ? ref$ : 1;
      half = cfg.count / 2;
      html = "<div><div></div>" + repeatString$('<div></div>', half) + "<div></div></div>\n<div><div></div>" + repeatString$('<div></div>', half) + "<div></div></div>";
      dr = 360 / cfg.count;
      da1 = 45;
      da2 = 225;
      css = "@keyframes $id-1 {\n    0% { transform: rotate(" + (0 + da1) + "deg) scale(0.6) translate(-" + 19 * s + "px,-" + 19 * s + "px) }\n   50% { transform: rotate(" + (dr / 2 + da1) + "deg) scale(0.6) translate(-" + 19 * s + "px,-" + 19 * s + "px) }\n  100% { transform: rotate(" + (dr + da1) + "deg) scale(0.6) translate(-" + 19 * s + "px,-" + 19 * s + "px) }\n}\n\n@keyframes $id-2 {\n    0% { transform: rotate(" + (dr + da2) + "deg) scale(0.6) translate(" + 19 * s + "px," + 19 * s + "px) }\n   50% { transform: rotate(" + (dr / 2 + da2) + "deg) scale(0.6) translate(" + 19 * s + "px," + 19 * s + "px) }\n  100% { transform: rotate(" + (0 + da2) + "deg) scale(0.6) translate(" + 19 * s + "px," + 19 * s + "px) }\n}\n\n.$id > div {\n  transform-origin: " + 31 * s + "px " + 31 * s + "px;\n  animation: $id-1 " + 1 / cfg.speed + "s infinite linear;\n}\n    \n.$id > div:nth-child(2) {\n  transform-origin: " + 69 * s + "px " + 69 * s + "px;\n  animation: $id-2 " + 1 / cfg.speed + "s infinite linear;\n  animation-delay: " + -1 / (2 * cfg.speed) + "s\n}\n\n.$id div:nth-child(1) > div { background: " + cfg.c1 + " }\n\n.$id div:nth-child(2) > div { background: " + cfg.c2 + " }\n\n.$id div > div {\n  position: absolute;\n  width: " + cfg.toothWidth * s + "px;\n  height: " + (cfg.toothHeight + cfg.outerRadius) * 2 * s + "px;\n  left: " + 50 * s + "px;\n  top: " + 50 * s + "px;\n  transform: translate(-50%,-50%)\n}\n\n.$id div > div:nth-child(1) {\n  width: " + cfg.outerRadius * 2 * s + "px;\n  height: " + cfg.outerRadius * 2 * s + "px;\n  border-radius: 50%\n}\n\n.$id div > div:nth-child(" + Math.floor(cfg.count / 2 + 2) + ") {\n  width: " + cfg.innerRadius * 2 * s + "px;\n  height: " + cfg.innerRadius * 2 * s + "px;\n  background: " + cfg.background + ";\n  border-radius: 50%\n}";
      for (i$ = 3, to$ = cfg.count / 2 + 1; i$ <= to$; ++i$) {
        i = i$;
        css += ".$id div > div:nth-child(" + i + ") {\n  transform: translate(-50%,-50%) rotate(" + (i - 2) * (360 / cfg.count) + "deg)\n}";
      }
      return {
        css: css,
        html: html
      };
    },
    dom: function(config){
      var svg, pathCmds, dr, i$, j, b, pathCmd, ref$, ro, ri, theta, dangle, sangle, j$, to$, i, a1, a2, na1, x1, y1, nx1, ny1, x4, y4, dx, dy, dlen, x2, y2, x3, y3, cmd, c;
      svg = [" <g transform=\"translate(50 50)\"> "];
      pathCmds = [];
      dr = 360 / config.count;
      for (i$ = 0; i$ < 2; ++i$) {
        j = i$;
        if (j === 0) {
          svg.push(" <g transform=\"translate(-19 -19) scale(0.6)\"> ");
          b = 0;
        } else {
          svg.push(" <g transform=\"translate(19 19) scale(0.6)\"> ");
          b = -1 / (2 * config.speed);
        }
        svg.push("<g>\n<animateTransform attributeName=\"transform\" type=\"rotate\"\nvalues=\"" + (j === 0
          ? '0;' + dr
          : dr + ';0') + "\" keyTimes=\"0;1\"\ndur=\"" + 1 / config.speed + "s\" begin=\"" + b + "s\" repeatCount=\"indefinite\"/>");
        pathCmd = [];
        ref$ = [config.outerRadius, config.innerRadius], ro = ref$[0], ri = ref$[1];
        theta = Math.asin((config.toothWidth * 0.5) / ro);
        dangle = (Math.PI * 2) / config.count;
        sangle = Math.PI / 4 + Math.PI * j;
        for (j$ = 0, to$ = config.count; j$ < to$; ++j$) {
          i = j$;
          a1 = sangle + dangle * i - theta;
          a2 = sangle + dangle * i + theta;
          na1 = sangle + dangle * (i + 1) - theta;
          x1 = ro * Math.cos(a1);
          y1 = ro * Math.sin(a1);
          nx1 = ro * Math.cos(na1);
          ny1 = ro * Math.sin(na1);
          x4 = ro * Math.cos(a2);
          y4 = ro * Math.sin(a2);
          dx = (x1 + x4) / 2;
          dy = (y1 + y4) / 2;
          dlen = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));
          dx = dx / dlen;
          dy = dy / dlen;
          x2 = x1 + dx * config.toothHeight;
          y2 = y1 + dy * config.toothHeight;
          x3 = x4 + dx * config.toothHeight;
          y3 = y4 + dy * config.toothHeight;
          cmd = i === 0 ? "M" : "L";
          c = j === 0
            ? config.c1
            : config.c2;
          pathCmd.push(cmd + "" + x1 + " " + y1 + " L" + x2 + " " + y2 + " L" + x3 + " " + y3 + " L" + x4 + " " + y4 + " A" + ro + " " + ro + " 0 0 1 " + nx1 + " " + ny1);
        }
        pathCmd.push("M0 " + (-ri) + "A" + ri + " " + ri + " 0 1 0 0 " + ri + " A" + ri + " " + ri + " 0 1 0 0 " + (-ri));
        svg.push("<path d=\"" + pathCmd.join(' ') + "\" fill=\"" + c + "\"/></g></g>");
      }
      svg.push("</g>");
      return svg.join("");
    }
  };
  if (typeof module != 'undefined' && module !== null) {
    module.exports = ret;
  }
  if (typeof ModManager != 'undefined' && ModManager !== null) {
    ModManager.register(ret);
  }
  return ret;
})();
function repeatString$(str, n){
  for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
  return r;
}
},{}]},{},[1]);
